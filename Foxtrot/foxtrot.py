import jsonimport _sqlite3from Scraping_shoops.Classes.store import Soupfrom Scraping_shoops.Foxtrot.shop_model import FoxtrotStorefrom Scraping_shoops.utillities import get_article_from_titlefoxtrot = FoxtrotStore()response = foxtrot.get()soup = Soup(response)all_items = soup.find_element(class_='listing__body-wrap image-switch')item_list = []def generate_info():    for item in all_items.find_all('article'):        price = item.find_next('div', class_="card-price")        name = item.find_next(class_='card__title')        if price is not None:            price = price.text.strip().replace(" ", "").replace("â‚´", "")        if name is not None:            name = name.get('title')        card_item = {            'name': name,            'price': price,            'article': get_article_from_title(name)        }        item_list.append(card_item)    return item_listdef compare_data(partner_list):    table_conn = _sqlite3.connect('Wacom_price.db')    cursor = table_conn.cursor()    for elem in partner_list:        article = elem['article']        price_partner = int(elem['price'])        cursor.execute("SELECT price FROM WACOM WHERE article = ?", (article,))        result = cursor.fetchone()        if result:            price_from_db = result[0]        # Compare prices        if price_partner != price_from_db and article:            alert_message = (f'Alert, {elem["name"]} price does not match. JSON price: {price_partner}, '                             f'DB price: {price_from_db}')            print(alert_message)        else:            print('OK')    else:        print(f'Article {article} not found in the database')generate_info()compare_data(item_list)