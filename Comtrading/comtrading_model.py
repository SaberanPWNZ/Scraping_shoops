import requestsfrom Classes.store import BaseStorefrom Comtrading.comtrading_info import COMTRADING_ARTICLESfrom databases.parse_db import get_info_from_dbclass ComtradingStore(BaseStore):    def __init__(self, api_url, payload):        super().__init__(shop_url='https://ktc.ua/search/brand-wacom/graphic_tablets/?q=wacom&sort-search-desc')        self.url = api_url        self.payload = payload    def generate_info(self):        try:            response = requests.post(url=self.url, json=self.payload)            data = response.json()            for item in data['products']:                name = item['name']                price = item['price_local']                article = item['sku']                card_item = {                    'name': name.strip(),                    'price': int(price),                    'article': article                }                self.item_list.append(card_item)        except requests.exceptions.RequestException as e:            print(f"An error occurred: {e}")        return self.item_list    def compare_data_xp_pen(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = COMTRADING_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items