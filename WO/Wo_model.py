import requestsfrom bs4 import BeautifulSoupfrom Classes import dbfrom Classes.store import BaseStorefrom utillities import get_article_from_title, clean_priceclass WoStore(BaseStore):    def __init__(self):        super().__init__(shop_url='https://wo.ua/ua/search/?q=wacom')        self.soup = self.get_soup('https://wo.ua/ua/search/?q=wacom')        self.all_items = self.soup.find(class_='filtered-items')    def get_soup(self, url):        response = requests.get(url)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info(self):        try:            for item in self.soup.find_all('div', class_='product-item ecom_item'):                price_element = item.find('div', class_='product-item__bottom-price-new')                name_element = item.find('a', class_='product-item__name')                if price_element and name_element:                    price = price_element.text.strip().replace('.00', '')                    name = name_element.text.strip()                    if name == "–ú–æ–Ω—ñ—Ç–æ—Ä-–ø–ª–∞–Ω—à–µ—Ç Wacom Cintiq Pro 16 (2021) (DTH167K0B)":                        article = 'DTH167K0B'                    else:                        article = get_article_from_title(name)                    card_item = {                        'name': name,                        'price': clean_price(price),                        'article': article                    }                    self.item_list.append(card_item)        except Exception as e:            return e        return self.item_list    # def compare_data(self, partner_list):    #     items_from_db = list(db.get_info_from_db())    #     items_dict = {item.article: item for item in items_from_db}    #    #     missing_items = []    #    #     for elem in partner_list:    #         try:    #             article = elem.get('article', '').upper()    #             if not article:    #                 raise ValueError(f'Article is missing or empty in element: {elem}')    #    #             price_partner = int(elem['price'])    #    #             if article in items_dict:    #                 item = items_dict[article]    #                 item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)    #                 if price_partner == item_price:    #                     missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')    #    #                 elif price_partner < item_price:    #                     missing_items.append(    #                         f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')    #    #                 elif price_partner > item_price:    #                     missing_items.append(    #                         f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')    #             else:    #                 missing_items.append(f'üîç {article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')    #    #         except KeyError as e:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω–∏—Ö {elem}, {e}')    #    #         except ValueError as e:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: {e}')    #    #         except Exception as e:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö')    #    #     sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('üõë'), x))    #     return sorted_items