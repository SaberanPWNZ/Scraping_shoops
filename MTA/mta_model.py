from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.chrome.service import Servicefrom selenium.webdriver.support.wait import WebDriverWaitfrom Classes.store import BaseStorefrom MTA.mta_config import MTA_ITEMSfrom databases.parse_db import get_info_from_dbfrom utillities import clean_pricefrom selenium.webdriver.support import expected_conditions as ECfrom webdriver_manager.chrome import ChromeDriverManagerfrom selenium.common.exceptions import TimeoutException, NoSuchElementExceptionclass MtaStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://mta.ua/search/manufacturers_wacom/page=2?search=wacom'        )        self.item_list = []    def generate_info(self):        options = webdriver.ChromeOptions()        options.add_argument('--headless')        options.add_argument('--no-sandbox')        options.add_argument('--disable-dev-shm-usage')        options.add_argument('--disable-gpu')        options.add_argument('--remote-debugging-port=9222')        options.add_argument('--disable-extensions')        options.add_argument('--disable-application-cache')        options.add_argument('--disable-infobars')        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)        try:            for i in range(1, 3):                try:                    driver.get(f'https://mta.ua/search/manufacturers_wacom/page={i}?search=wacom')                    # –Ø–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞                    WebDriverWait(driver, 10).until(                        EC.presence_of_element_located((By.CSS_SELECTOR, 'div.products__item'))                    )                    items = driver.find_element(By.CSS_SELECTOR,                                                'body > div.content.content-container.catalogPage.catalog_page > div > div > main > '                                                'div > div.catalog_page__products.products.products_column_4.catalog-body > div')                    for item in items.find_elements(By.CLASS_NAME, 'products__item'):                        try:                            name = item.find_element(By.CLASS_NAME, 'products__item_caption').find_element(                                By.CLASS_NAME, 'products__item_name')                            price = item.find_element(By.CLASS_NAME, 'products__item_price')                            if price:                                price = price.text.strip('‚Ç¥').replace(' ', "").strip()                            else:                                price = None                            card_item = {                                'name': name.text.strip(),                                'price': clean_price(price),                                'article': name.text.strip(),                            }                            self.item_list.append(card_item)                        except NoSuchElementException as e:                            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')                except TimeoutException as e:                    print(f'–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')        except Exception as e:            print(f'–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}')        finally:            driver.quit()        return self.item_list    def compare_data_mta(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem.get('name')            price_partner = elem.get('price')            if not price_partner:                print(f'Price missing for {name}')                continue            price_partner = int(price_partner)            article = MTA_ITEMS.get(name)            if article in items_dict and article != 'EOL':                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                missing_items.append(f'üîç{article} –Ω–µ–∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('üõë'), x))        return sorted_items