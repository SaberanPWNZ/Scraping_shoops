from playwright.async_api import async_playwrightfrom selenium.webdriver.common.by import Byfrom Classes.store import BaseStorefrom selenium import webdriverfrom utillities import get_article_from_title, clean_pricefrom selenium import webdriverfrom playwright.sync_api import sync_playwrightfrom Classes.store import BaseStorefrom utillities import get_article_from_title, clean_priceclass RozetkaStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://rozetka.com.ua/search/?producer=wacom&redirected=1&seller=rozetka&text=wacom'        )        self.shop_url = 'https://rozetka.com.ua/search/?producer=wacom&redirected=1&seller=rozetka&text=wacom'        self.item_list = []    class RozetkaStore(BaseStore):        def __init__(self):            super().__init__(                shop_url='https://rozetka.com.ua/search/?producer=wacom&redirected=1&seller=rozetka&text=wacom'            )            self.item_list = []    async def generate_info(self):        async with async_playwright() as p:            browser = await p.chromium.launch()            page = await browser.new_page()            await page.goto(self.shop_url)            items = await page.query_selector_all('li.catalog-grid__cell')            for item in items:                try:                    title_element = await item.query_selector('a.product-link.goods-tile__heading')                    title_text = await title_element.inner_text()                    article = get_article_from_title(title_text.strip('(Офіційна гарантія 24 міс.)'))                    price_new_elements = await item.query_selector_all('span.goods-tile__price-value')                    price_old_elements = await item.query_selector_all('div.goods-tile__price--old')                    status_elements = await item.query_selector_all('div.goods-tile__availability')                    available = True                    if status_elements:                        availability_text = await status_elements[0].inner_text()                        if 'Немає в наявності' in availability_text:                            available = False                            continue                    price = 'N/A'                    if price_new_elements:                        price = await price_new_elements[0].inner_text()                    elif price_old_elements:                        price = await price_old_elements[0].inner_text()                    card_item = {                        'name': title_text.replace("Офіційна гарантія 24 міс.", ""),                        'price': clean_price(price) if price != 'N/A' else price,                        'article': article,                        'available': available                    }                    self.item_list.append(card_item)                except Exception as e:                    print(f'Ошибка при обработке элемента')            await browser.close()        return self.item_list