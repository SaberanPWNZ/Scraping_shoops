from aiogram import types, Routerfrom aiogram.enums import ParseModefrom Auchan.auchan import start_auchanfrom CAN.can import start_canfrom Citrus.citrus import start_citrusfrom Click.click import start_clickfrom F.fotos import start_fotosfrom Foxtrot.foxtrot import start_foxtrotfrom Itbox.itbox import start_itboxfrom KTC.ktc import start_ktcfrom MTA.mta import start_mtafrom Moyo.moyo import start_moyofrom Rozetka.rozetka import start_rozetka, wacom, xp_penfrom Setevuha.setevuha import start_setevuhafrom WO.Wo import start_wouser_router = Router()@user_router.message(lambda message: message.text == "Foxtrot")async def foxtrot_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_foxtrot()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒Foxtrot:\n\n{result_str}")@user_router.message(lambda message: message.text == "Moyo")async def moyo_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_moyo()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Moyo:\n\n{result_str}")@user_router.message(lambda message: message.text == "KTC")async def ktc_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_ktc()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 KTC:\n\n{result_str}")@user_router.message(lambda message: message.text == "Click")async def click_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_click()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Click:\n\n{result_str}")@user_router.message(lambda message: message.text == "Rozetka")async def rozetka_handler(message: types.Message):    await message.answer("⏳ готую звіт... 5-10 секунд")    results = start_rozetka(wacom)    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Rozetka:\n\n{result_str}", parse_mode=ParseMode.HTML)@user_router.message(lambda message: message.text == "Auchan")async def auchan_handler(message: types.Message):    await message.answer("⏳ готую звіт... ")    results = start_auchan()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Auchan:\n\n{result_str}", parse_mode=ParseMode.HTML)@user_router.message(lambda message: message.text == "WO")async def wo_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_wo()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 WO:\n\n{result_str}", parse_mode=ParseMode.HTML)@user_router.message(lambda message: message.text == "Setevuha")async def setevuha_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_setevuha()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Setevuha:\n\n{result_str}", parse_mode=ParseMode.HTML)@user_router.message(lambda message: message.text == "CAN")async def can_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_can()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒CAN:\n\n{result_str}")@user_router.message(lambda message: message.text == "ItBox")async def itbox_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_itbox()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒ItBox:\n\n{result_str}")@user_router.message(lambda message: message.text == "Citrus")async def citrus_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_citrus()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒Citrus:\n\n{result_str}")@user_router.message(lambda message: message.text == "F.ua")async def Fotos_handler(message: types.Message):    await message.answer("⏳ готую звіт...5-10 сек.")    results = start_fotos()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒F.ua:\n\n{result_str}")@user_router.message(lambda message: message.text == "MTA")async def mta_handler(message: types.Message):    await message.answer("⏳ готую звіт...5-10 сек.")    results = start_mta()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒MTA:\n\n{result_str}")