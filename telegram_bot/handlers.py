import jsonfrom aiogram import types, Routerfrom aiogram.enums import ParseModefrom redis_client.redis_client import redis_clientfrom stores.Brain.brain import start_brain_wacom, start_brain_xp_penfrom stores.CAN.can import start_can_xp_pen, start_can_wacomfrom stores.Citrus.citrus import start_citrus_wacomfrom stores.Click.click import start_click_xp_pen, start_click_wacomfrom stores.Comfy.comfy import start_comfy_wacom, start_comfy_xp_penfrom stores.EXE.exe import start_exe_wacom, start_exe_xp_penfrom stores.F.fotos import start_fotosfrom stores.Foxtrot.foxtrot import start_foxtrot_xp_pen, start_foxtrot_wacomfrom stores.Itbox.itbox import start_itbox_wacom, start_itbox_xp_penfrom stores.KTC.ktc import start_ktc_wacom, start_ktc_xp_penfrom stores.MTA.mta import start_mtafrom stores.Moyo.moyo import start_moyofrom stores.Portativ.portativ import start_portativ_wacom, start_portativ_xp_penfrom stores.Setevuha.setevuha import start_setevuhafrom stores.WO.Wo import start_wo_wacom, start_wo_xp_penfrom stores.Comtrading.comtrading import start_comtrading_wacom, start_comtrading_xp_penfrom stores.WacomStore.wacom_store import start_wacom_store_wacomfrom utillities import create_messageuser_router = Router()@user_router.message(lambda message: message.text == "Foxtrot")async def foxtrot_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('foxtrot')    results_xp_json = redis_client.get_data_from_redis('foxtrot_xp')    if results_wacom_json and results_xp_json:        results_wacom = json.loads(results_wacom_json)        results_xp = json.loads(results_xp_json)        answer = create_message(shop_name='Foxtrot', text=results_wacom, brand_name='WACOM')        answer_xp = create_message(shop_name='Foxtrot', text=results_xp, brand_name='XP-Pen')        await message.answer(answer)        await message.answer(answer_xp)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Moyo")async def moyo_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('moyo')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Moyo', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "KTC")async def ktc_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('ktc')    results_xp_json = redis_client.get_data_from_redis('ktc_xp')    if results_wacom_json and results_xp_json:        results_wacom = json.loads(results_wacom_json)        results_xp = json.loads(results_xp_json)        answer = create_message(shop_name='KTC', text=results_wacom, brand_name='WACOM')        answer_xp = create_message(shop_name='KTC', text=results_xp, brand_name='XP-Pen')        await message.answer(answer)        await message.answer(answer_xp)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Click")async def click_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('click_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('click_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='Click.ua', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='Click.ua', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Rozetka")async def rozetka_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('rozetka')    results_xp_json = redis_client.get_data_from_redis('rozetka_xp')    results_wacom = json.loads(results_wacom_json)    results_wacom_xp = json.loads(results_xp_json)    if results_wacom and results_wacom_xp:        answer = create_message(shop_name='Rozetka', text=results_wacom, brand_name='WACOM')        answer_xp = create_message(shop_name='Rozetka', text=results_wacom_xp, brand_name='XP-Pen')        await message.answer(answer)        await message.answer(answer_xp)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Auchan")async def auchan_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('auchan')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Auchan', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "WO")async def wo_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('wo_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('wo_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='WO.ua', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='WO.ua', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Setevuha")async def setevuha_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('setevuha')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Setevuha.ua', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "CAN")async def can_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('can_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('can_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='CAN', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='CAN', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "ItBox")async def itbox_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('itbox_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('itbox_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='Itbox', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='Itbox', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Citrus")async def citrus_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('citrus_wacom')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Citrus', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "F.ua")async def Fotos_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('fotos_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('fotos_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='F.ua', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='F.ua', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "MTA")async def mta_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('mta_wacom')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='MTA.ua', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Comtrading")async def comtrading_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('comtrading_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('comtrading_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='Comtrading', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='Comtrading', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Brain")async def brain_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('brain_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('brain_xp')    results_wacom = json.loads(results_wacom_json)    result_xp = json.loads(results_xp_pen_json)    if results_wacom and result_xp:        answer_wacom = create_message(shop_name='Brain', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='Brain', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "WacomStore")async def wacom_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('wacomstore')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='WacomStore', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "EXE")async def exe_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('exe_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('exe_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='EXE', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='EXE', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Portativ")async def portativ_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('portativ_wacom')    results_xp_pen_json = redis_client.get_data_from_redis('portativ_xp_pen')    if results_wacom_json and results_xp_pen_json:        results_wacom = json.loads(results_wacom_json)        result_xp = json.loads(results_xp_pen_json)        answer_wacom = create_message(shop_name='Portativ', text=results_wacom, brand_name='WACOM')        answer_xp_pen = create_message(shop_name='Portativ', text=result_xp, brand_name='XP-Pen')        await message.answer(answer_wacom)        await message.answer(answer_xp_pen)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Comfy")async def comfy_xp_pen_wacom(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('comfy_wacom')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Comfy', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Не вдалось отримати данні')@user_router.message(lambda message: message.text == "Comfy-XP-Pen")async def comfy_xp_pen_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen. Цеможе зайняти 10-15 сек")    results_xp_pen = start_comfy_xp_pen()    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒Comfy XP-Pen:\n\n{result_str_xp_pen}")# @user_router.message()# async def all_message_handler(message: types.Message):#     await message.answer(f'{message.from_user.username}, я не знаю як на це реагувати')#     await message.answer('/help')