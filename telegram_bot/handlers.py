import jsonfrom aiogram import types, Routerfrom aiogram.enums import ParseModefrom redis_client.redis import redis_clientfrom stores.Brain.brain import start_brain_wacom, start_brain_xp_penfrom stores.CAN.can import start_can_xp_pen, start_can_wacomfrom stores.Citrus.citrus import start_citrusfrom stores.Click.click import start_click_xp_pen, start_click_wacomfrom stores.Comfy.comfy import start_comfy_wacom, start_comfy_xp_penfrom stores.EXE.exe import start_exe_wacom, start_exe_xp_penfrom stores.F.fotos import start_fotosfrom stores.Foxtrot.foxtrot import start_foxtrot_xp_pen, start_foxtrot_wacomfrom stores.Itbox.itbox import start_itbox_wacom, start_itbox_xp_penfrom stores.KTC.ktc import start_ktc, start_ktc_xp_penfrom stores.MTA.mta import start_mtafrom stores.Moyo.moyo import start_moyofrom stores.Portativ.portativ import start_portativ_wacom, start_portativ_xp_penfrom stores.Setevuha.setevuha import start_setevuhafrom stores.WO.Wo import start_wo_wacom, start_wo_xp_penfrom stores.Comtrading.comtrading import start_comtrading_wacom, start_comtrading_xp_penfrom stores.WacomStore.wacom_store import start_wacom_store_wacomfrom utillities import create_messageuser_router = Router()@user_router.message(lambda message: message.text == "Foxtrot")async def foxtrot_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('foxtrot')    results_wacom = json.loads(results_wacom_json)    answer = create_message(shop_name='Foxtrot', text=results_wacom, brand_name='WACOM')    results_wacom_json = redis_client.get_data_from_redis('foxtrot_xp')    results_wacom = json.loads(results_wacom_json)    answer_xp = create_message(shop_name='Foxtrot', text=results_wacom, brand_name='XP-Pen')    await message.answer(answer)    await message.answer(answer_xp)@user_router.message(lambda message: message.text == "Moyo")async def moyo_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('moyo')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Moyo', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Error')@user_router.message(lambda message: message.text == "KTC")async def ktc_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('ktc')    results_wacom = json.loads(results_wacom_json)    answer = create_message(shop_name='KTC', text=results_wacom, brand_name='WACOM')    results_wacom_json = redis_client.get_data_from_redis('ktc_xp')    results_wacom = json.loads(results_wacom_json)    answer_xp = create_message(shop_name='KTC', text=results_wacom, brand_name='XP-Pen')    await message.answer(answer)    await message.answer(answer_xp)@user_router.message(lambda message: message.text == "Click")async def click_handler(message: types.Message):    await message.answer("⏳ готую звіт Wacom/XP-Pen")    results_wacom = start_click_wacom()    # results_xp_pen = start_click_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    # result_str_xp = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒 Click WACOM:\n\n{result_str_wacom}")    # await message.answer(f"🛒 Click XP-PEN:\n\n{result_str_xp}")@user_router.message(lambda message: message.text == "Rozetka")async def rozetka_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('rozetka')    results_wacom = json.loads(results_wacom_json)    answer = create_message(shop_name='Rozetka', text=results_wacom, brand_name='WACOM')    results_wacom_json = redis_client.get_data_from_redis('rozetka_xp')    results_wacom = json.loads(results_wacom_json)    answer_xp = create_message(shop_name='Rozetka', text=results_wacom, brand_name='XP-Pen')    await message.answer(answer)    await message.answer(answer_xp)@user_router.message(lambda message: message.text == "Auchan")async def auchan_handler(message: types.Message):    results_wacom_json = redis_client.get_data_from_redis('auchan')    if results_wacom_json:        results_wacom = json.loads(results_wacom_json)        answer = create_message(shop_name='Auchan', text=results_wacom, brand_name='WACOM')        await message.answer(answer)    else:        await message.answer('Error')@user_router.message(lambda message: message.text == "WO")async def wo_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results_wacom = start_wo_wacom()    results_xp_pen = start_wo_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒 WO WACOM(товари, які є в наявності):\n\n{result_str_wacom}")    await message.answer(f"🛒 WO XP-Penт(товари, які є в наявності):\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "Setevuha")async def setevuha_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_setevuha()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒 Setevuha:\n\n{result_str}", parse_mode=ParseMode.HTML)@user_router.message(lambda message: message.text == "CAN")async def can_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results_wacom = start_can_wacom()    results_xp_pen = start_can_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒CAN: WACOM:\n\n{result_str_wacom}")    await message.answer(f"🛒CAN: XP-Pen:\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "ItBox")async def itbox_handler(message: types.Message):    await message.answer("⏳ готую звіт..WACOM/XP-Pen")    results_wacom = start_itbox_wacom()    results_xp_pen = start_itbox_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒ItBox WACOM:\n\n{result_str_wacom}")    await message.answer(f"🛒ItBox XP-Pen:\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "Citrus")async def citrus_handler(message: types.Message):    await message.answer("⏳ готую звіт...")    results = start_citrus()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒Citrus:\n\n{result_str}")@user_router.message(lambda message: message.text == "F.ua")async def Fotos_handler(message: types.Message):    await message.answer("⏳ готую звіт...5-10 сек.")    results = start_fotos()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒F.ua:\n\n{result_str}")@user_router.message(lambda message: message.text == "MTA")async def mta_handler(message: types.Message):    await message.answer("⏳ готую звіт...5-10 сек.")    results = start_mta()    result_str = '\n'.join([str(item) for item in results])    await message.answer(f"🛒MTA:\n\n{result_str}")@user_router.message(lambda message: message.text == "Comtrading")async def comtrading_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen")    results_wacom = start_comtrading_wacom()    results_xp_pen = start_comtrading_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒Comtrading WACOM:\n\n{result_str_wacom}")    await message.answer(f"🛒Comtrading XP-Pen:\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "Brain")async def brain_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen")    results_wacom = start_brain_wacom()    results_xp_pen = start_brain_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒Brain WACOM:\n\n{result_str_wacom}")    await message.answer(f"🛒Brain XP-Pen:\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "WacomStore")async def wacom_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom")    results_wacom = start_wacom_store_wacom()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    await message.answer(f"🛒WacomStore WACOM:\n\n{result_str_wacom}")@user_router.message(lambda message: message.text == "EXE")async def exe_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom")    results_wacom = start_exe_wacom()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    await message.answer(f"🛒EXE WACOM:\n\n{result_str_wacom}")@user_router.message(lambda message: message.text == "Portativ")async def portativ_handler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen")    results_wacom = start_portativ_wacom()    results_xp_pen = start_portativ_xp_pen()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒Portativ WACOM:\n\n{result_str_wacom}")    await message.answer(f"🛒Portativ XP-Pen:\n\n{result_str_xp_pen}")@user_router.message(lambda message: message.text == "Comfy-Wacom")async def comfy_xp_pen_wacom(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen. Цеможе зайняти 10-15 сек")    results_wacom = start_comfy_wacom()    result_str_wacom = '\n'.join([str(item) for item in results_wacom])    await message.answer(f"🛒Comfy WACOM:\n\n{result_str_wacom}")@user_router.message(lambda message: message.text == "Comfy-XP-Pen")async def comfy_xp_pen_haldler(message: types.Message):    await message.answer("⏳ готую звіт...Wacom/XP-Pen. Цеможе зайняти 10-15 сек")    results_xp_pen = start_comfy_xp_pen()    result_str_xp_pen = '\n'.join([str(item) for item in results_xp_pen])    await message.answer(f"🛒Comfy XP-Pen:\n\n{result_str_xp_pen}")# @user_router.message()# async def moyo_handler(message: types.Message):#     await message.answer(f'{message.from_user.username}, я не знаю як на це реагувати')#     await message.answer('/help')