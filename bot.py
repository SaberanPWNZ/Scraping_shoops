import asyncioimport loggingimport osfrom dotenv import load_dotenvfrom aiogram import Bot, Dispatcher, typesfrom aiogram.filters import Commandfrom Foxtrot.foxtrot import start_foxtrotfrom KTC.ktc import start_ktcfrom Moyo.moyo import start_moyofrom Click.click import start_clickload_dotenv()token = os.getenv(key='BOT_TOKEN')bot = Bot(token=token)dp = Dispatcher(bot=bot)logging.basicConfig(level=logging.INFO)@dp.message(Command(commands=["start"]))async def start(message: types.Message):    kb = [        [types.KeyboardButton(text="Foxtrot")],        [types.KeyboardButton(text="Moyo")],        [types.KeyboardButton(text="KTC")],        [types.KeyboardButton(text="Click")]    ]    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.username}!‚úã:")    await message.answer(f"–¢–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É  ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è", reply_markup=keyboard)@dp.message()async def handle_message(message: types.Message):    if message.text == "Foxtrot":        results = start_foxtrot()        result_str = '\n'.join([str(item) for item in results])        await message.answer(f"üõíFoxtrot:\n\n{result_str}")    elif message.text == "Moyo":        results = start_moyo()        result_str = '\n'.join([str(item) for item in results])        await message.answer(f"üõí Moyo:\n\n{result_str}")    elif message.text == "KTC":        results = start_ktc()        result_str = '\n'.join([str(item) for item in results])        await message.answer(f"üõí KTC:\n\n{result_str}")    elif message.text == "Click":        results = start_click()        result_str = '\n'.join([str(item) for item in results])        await message.answer(f"üõí Click:\n\n{result_str}")    else:        await message.answer("–æ–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω")async def main():    await dp.start_polling(bot, skip_updates=True)if __name__ == "__main__":    asyncio.run(main())# @dp.message(Command(commands=['start']))# async def start(message: types.Message):#     await message.reply(f'üëã–ü—Ä–∏–≤—ñ—Ç, {message.from_user.username}')#     time.sleep(3)#     await message.answer('–î–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —è –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—ñ —Ü—ñ–Ω–∏ –Ω–∞ Wacom!')#     await message.answer(f'–≤–≤–µ–¥–∏ "/" —Ç–∞ –Ω–∞–∑–≤—É –º–∞–≥–∞–∑–∏–Ω—É –∑—ñ —Å–ø–∏—Å–∫—É')#     await message.answer('foxtrot, ktc, moyo')### @dp.message(Command(commands=["foxtrot"]))# async def check_foxtrot(message: types.Message):#     await message.reply('üòé–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ü–∏–Ω—ñ –Ω–∞ Foxtrot.ua')#     results = start_foxtrot() or []##     result_str = '\n'.join([str(item) for item in results])##     await message.answer(result_str.strip())### @dp.message(Command(commands=["moyo"]))# async def check_moyo(message: types.Message):#     await message.reply('üòé–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ü—ñ–Ω–∏ –Ω–∞ Moyo.ua')#     results = start_moyo() or []##     result_str = '\n'.join([str(item) for item in results])##     await message.answer(result_str.strip())### @dp.message(Command(commands=["ktc"]))# async def check_ktc(message: types.Message):#     await message.reply('üòé–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ü—ñ–Ω–∏ –Ω–∞ KTC.ua')#     results = start_ktc() or []##     result_str = "Results from KTC:\n"#     result_str += '\n'.join([str(item) for item in results])##     await message.answer(result_str.strip())### @dp.message()# async def all_messages(message: types.Message):#     await message.reply('ü§î—è –Ω–µ –∑–Ω–∞—é —è–∫ –Ω–∞ —Ü–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏')### async def main():#     await dp.start_polling(bot, skip_updates=True)### if __name__ == '__main__':#     asyncio.run(main())