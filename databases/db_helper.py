import asyncioimport loggingfrom Classes.db import DataBasefrom databases.google_table_ranges import wacom_table_urlfrom databases.parse_db import GoogleSheet, db_pathdb = DataBase(db_path=db_path)google_sheet = GoogleSheet()logging.basicConfig(level=logging.INFO)async def update_info_schedule():    try:        info_wacom = await asyncio.to_thread(google_sheet.generate_info_from_google_sheet,                                             google_sheet_url=google_sheet.wacom_table_url,                                            ranges=GoogleSheet.ranges_wacom)        info_xp = await asyncio.to_thread(google_sheet.generate_info_from_google_sheet,                                          google_sheet_url=google_sheet.xp_pen_table_url,                                        ranges=GoogleSheet.ranges_xppen)        clear_info_wacom = await asyncio.to_thread(google_sheet.clear_info_from_sheets, info_wacom)        clear_info_xp = await asyncio.to_thread(google_sheet.clear_info_from_sheets, info_xp)        await asyncio.to_thread(db.update_db, clear_info_wacom)        await asyncio.to_thread(db.update_db, clear_info_xp)    except Exception as e:        logging.error(f"Ошибка при обновлении информации: {e}")async def schedule_updates():    while True:        await update_info_schedule()        await asyncio.sleep(3600)  # 1 hour# table = GoogleSheet()# DATA = table.generate_info_from_google_sheet_list(google_sheet_url=wacom_table_url)# cleaned_data = table.clear_info_from_sheets_lists(DATA)## db.update_db(cleaned_data)