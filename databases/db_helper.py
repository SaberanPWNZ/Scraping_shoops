import loggingimport osimport djangofrom databases.parse_db import GoogleSheetos.environ.setdefault("DJANGO_SETTINGS_MODULE", "scraper.settings")django.setup()from dotenv import load_dotenvfrom items.models import Item, Status, Warranty, Categoryload_dotenv()logger = logging.getLogger(__name__)from django.db import transactionfrom decimal import Decimal@transaction.atomicdef update_database(info_from_google_sheet):    try:        if not info_from_google_sheet:            logger.error("Список info_from_google_sheet пуст.")            return        for elem in info_from_google_sheet:            logger.info(f"Обрабатываем элемент: {elem}")            article = elem.get('article')            title = elem.get('title')            status_name = elem.get('status')            warranty_name = elem.get('warranty')            category_name = 'tablets'            partner_price = elem.get('partner_price', 0)            rrp_price = elem.get('rrp_price', 0)            ean = elem.get('ean', '')            if not all([article, title, status_name, warranty_name]):                logger.error(f"Отсутствуют обязательные данные в элементе: {elem}")                continue            try:                partner_price = Decimal(str(partner_price))                rrp_price = Decimal(str(rrp_price))            except (ValueError, TypeError) as e:                logger.error(f"Ошибка преобразования цены: {e} для элемента: {elem}")                continue            try:                status_obj, _ = Status.objects.get_or_create(name=status_name)                warranty_obj, _ = Warranty.objects.get_or_create(name=warranty_name)                category_obj, _ = Category.objects.get_or_create(name=category_name)            except Exception as e:                logger.error(f"Ошибка при создании/получении связанных объектов: {e}")                continue            logger.info(f"Status: {status_obj}, Warranty: {warranty_obj}, Category: {category_obj}")            try:                item, created = Item.objects.update_or_create(                    article=article,                    defaults={                        'title': title,                        'status': status_obj,                        'warranty': warranty_obj,                        'category': category_obj,                        'partner_price': partner_price,                        'rrp_price': rrp_price,                        'ean': ean,                    }                )                logger.info(f"Объект: {item}, создан: {created}")            except Exception as e:                logger.error(f"Ошибка при создании/обновлении объекта: {e} для элемента: {elem}")                continue    except Exception as e:        logger.error(f"Ошибка в процессе обработки данных: {e}")        raise# parser = GoogleSheet()## data = parser.generate_info_from_google_sheet_list(#     google_sheet_url=parser.wacom_table_url,#     sheet_name='WACOM'# )## cleared_data = parser.clear_info_from_sheets(data)# update_database(cleared_data)