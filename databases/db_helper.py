import loggingimport osfrom datetime import datetimefrom typing import List, Dict, Optionalfrom dotenv import load_dotenvfrom sqlalchemy import create_engine, insert, update, selectfrom sqlalchemy.exc import SQLAlchemyErrorfrom sqlalchemy.orm import sessionmaker, Sessionfrom databases.parse_db import GoogleSheetload_dotenv()class Settings:    DB_USER = os.getenv('DB_USERNAME')    DB_PASS = os.getenv('DB_PASSWORD')    DB_HOST = os.getenv('DB_HOST')    DB_NAME = os.getenv('DB_NAME')    DB_PORT = os.getenv('DB_PORT')    @property    def db_url(self):        return f"postgresql+psycopg2://{self.DB_USER}:{self.DB_PASS}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}"db = Settings()DATABASE_URL = db.db_urlengine = create_engine(DATABASE_URL, pool_size=15)session_maker = sessionmaker(engine, expire_on_commit=False)google_sheet = GoogleSheet()logging.basicConfig(level=logging.INFO)def get_session():    with session_maker() as session:        return sessiondef update_database(session: Session, info_from_google_sheet):    try:        for elem in info_from_google_sheet:            article = elem.get('article')            title = elem.get('title')            price_str = elem.get('price')            if not article or not title or not price_str:                logging.error(f"Missing or invalid fields in item: {elem}")                continue            if article == 'DTH135K0B':                price = 1                logging.info(f"Special case: Setting price to 1 for item with article: {article}")            else:                try:                    price = int(price_str)                except (ValueError, TypeError):                    logging.error(f"Invalid price value: {price_str} in item: {elem}")                    continue            stmt = select(Item).where(Item.article == article)            existing_item = session.execute(stmt).scalar_one_or_none()            if existing_item:                stmt = (                    update(Item)                    .where(Item.article == article)                    .values(price=price)                )                logging.info(f"Updating item: {article} with new price: {price}")            else:                stmt = insert(Item).values(article=article, title=title, price=price)                logging.info(f"Inserting new item: {article}, title: {title}, price: {price}")            session.execute(stmt)        session.commit()        current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')        logging.info(f"Database successfully updated at {current_datetime}")    except SQLAlchemyError as e:        logging.error(f"Error during database update: {e}")        session.rollback()        raise    except Exception as e:        logging.error(f"Unexpected error: {e}")        session.rollback()        raisedef update_db(table_url, sheet_name):    try:        table = GoogleSheet()        data = table.generate_info_from_google_sheet_list(google_sheet_url=table_url, sheet_name=sheet_name)        cleaned_data = table.clear_info_from_sheets_lists(data)        with session_maker() as sess:            update_database(sess, cleaned_data)    except Exception as e:        logging.error(f"Database was not updated: {e}")def update_db_xp_pen(table_url, sheet_name):    try:        table = GoogleSheet()        data = table.generate_info_from_google_sheet_list(google_sheet_url=table_url, sheet_name=sheet_name)        cleaned_data = table.clear_info_from_sheets_lists_for_xppen(data)        with session_maker() as sess:            update_database(sess, cleaned_data)    except Exception as e:        logging.error(f"Database was not updated: {e}")