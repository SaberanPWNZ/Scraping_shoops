import osimport djangofrom databases.parse_db import GoogleSheetos.environ.setdefault("DJANGO_SETTINGS_MODULE", "scraper.settings")django.setup()from dotenv import load_dotenvfrom items.models import Item, Status, Warranty, Categoryimport loggingfrom django.db import transactionfrom decimal import Decimalload_dotenv()logger = logging.getLogger(__name__)@transaction.atomicdef update_database(info_from_google_sheet: list) -> None:    if not info_from_google_sheet:        return    try:        for elem in info_from_google_sheet:            article = elem.get('article')            title = elem.get('title')            status_name = elem.get('status')            warranty_name = elem.get('warranty')            partner_price = elem.get('partner_price', 0)            rrp_price = elem.get('rrp_price', 0)            ean = elem.get('ean', '')            if not all([article, title, status_name, warranty_name]):                continue            try:                partner_price = Decimal(str(partner_price))                rrp_price = Decimal(str(rrp_price))            except (ValueError, TypeError) as e:                logger.error(f"Ошибка преобразования цены: {e} для элемента: {elem}")                continue            try:                status_obj, _ = Status.objects.get_or_create(name=status_name)                warranty_obj, _ = Warranty.objects.get_or_create(name=warranty_name)            except Exception as e:                logger.error(f"Ошибка при создании/получении связанных объектов: {e}")                continue            try:                item, created = Item.objects.update_or_create(                    article=article,                    defaults={                        'title': title,                        'status': status_obj,                        'warranty': warranty_obj,                        'partner_price': partner_price,                        'rrp_price': rrp_price,                        'ean': ean,                    }                )            except Exception as e:                logger.error(f"Ошибка при создании/обновлении объекта: {e} для элемента: {elem}")                continue    except Exception as e:        logger.error(f"Ошибка в процессе обработки данных: {e}")        raisebase = GoogleSheet()data = base.generate_info_from_google_sheet_list(    google_sheet_url=base.xp_pen_table_url,    sheet_name='XP-PEN')clean_data = base.clear_info_from_sheets(    list_of_items=data,    elem_positions=base.xp_pen_elem_position,    len_items=base.xp_pen_length_of_item_from_table)