import requestsfrom bs4 import BeautifulSoupfrom Classes.store import BaseStorefrom databases.db_helper import get_session, get_info_from_dbfrom stores.Brain.brain_info import WACOM_PAGES, BRAIN_ARTICLES_WACOM, XP_PEN_PAGESfrom utillities import clean_price, get_article_from_titleclass BrainStore(BaseStore):    def __init__(self, urls):        super().__init__(            shop_url='url')        self.urls = urls        self.all_items = []        for url in self.urls:            soup = self.get_soup(url)            items = soup.find(class_='view-grid tab-pane row br-row br-flex active')            self.all_items.append(items)    def get_soup(self, url):        response = requests.get(url)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info_wacom(self):        for items in self.all_items:            if items:                for item in items.find_all(                        class_='col-lg-3 col-md-4 col-sm-6 col-xs-6 product-wrapper br-pcg-product-wrapper'):                    name = item['data-name']                    price = item['data-price']                    status = item.find_next(class_='br-bb-buy')                    if status.text.strip() == '–ö—É–ø–∏—Ç–∏':                        card_item = {                            'name': name.strip(),                            'price': clean_price(price),                            'article': get_article_from_title(name.strip())                        }                        self.item_list.append(card_item)        return self.item_list    @classmethod    def compare_all_data(cls, partner_list, articles_list):        items_from_db = list(get_info_from_db(session=get_session()))        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else 1            article = articles_list.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶: {item_price} –≥—Ä–Ω')                else:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶: {item_price} –≥—Ä–Ω')            else:                missing_items.append(f'üîç{article} –Ω–µ–∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_itemsb = BrainStore(urls=XP_PEN_PAGES)data = b.generate_info_wacom()for i in data:    print(i['name'])