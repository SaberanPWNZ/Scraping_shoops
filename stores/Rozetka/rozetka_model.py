from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom Classes.store import BaseStorefrom databases.db_helper import get_session, get_info_from_dbfrom utillities import get_article_from_title, clean_pricefrom stores.Rozetka.rozetka_config import ROZETKA_ARTICLESclass RozetkaStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://rozetka.com.ua/ua/search/?producer=wacom&redirected=1&seller=rozetka_only&text=wacom'        )        self.item_list = []    def generate_info(self, url):        options = webdriver.ChromeOptions()        #options.add_argument('--headless')        options.add_argument('--no-sandbox')        options.add_argument('--disable-dev-shm-usage')        options.add_argument('--disable-gpu')        options.add_argument('--remote-debugging-port=9222')        options.add_argument('--disable-extensions')        options.add_argument('--disable-application-cache')        options.add_argument('--disable-infobars')        driver = webdriver.Chrome(options=options)        try:            driver.get(url)            items = driver.find_elements(By.CSS_SELECTOR, 'catalog-grid ng-star-inserted')            for item in items:                try:                    title_element = item.find_element(By.CSS_SELECTOR, 'a.product-link.goods-tile__heading')                    title_text = title_element.text.strip()                    article = get_article_from_title(title_text.strip('(–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è 24 –º—ñ—Å.)'))                    price_new_elements = item.find_elements(By.CSS_SELECTOR, 'span.goods-tile__price-value')                    price_old_elements = item.find_elements(By.CSS_SELECTOR, 'div.goods-tile__price--old')                    status_elements = item.find_elements(By.CSS_SELECTOR, 'div.goods-tile__availability')                    available = True                    if status_elements:                        availability_text = status_elements[0].text                        if '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' in availability_text:                            available = False                            continue                    price = 'N/A'                    if price_new_elements:                        price = price_new_elements[0].text                    elif price_old_elements:                        price = price_old_elements[0].text                    card_item = {                        'name': title_text.replace("–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è 24 –º—ñ—Å.", ""),                        'price': clean_price(price) if price != 'N/A' else price,                        'article': article,                        'available': available                    }                    self.item_list.append(card_item)                except Exception as e:                    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')        except Exception as e:            print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}')        finally:            driver.quit()        return self.item_list    @classmethod    def compare_data_xp_pen(cls, partner_list):        items_from_db = list(get_info_from_db(session=get_session()))        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = ROZETKA_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items