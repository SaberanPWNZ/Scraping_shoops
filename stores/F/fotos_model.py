from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom Classes.store import BaseStorefrom databases.parse_db import get_info_from_dbfrom stores.F.fotos_config import F_ARTICLESfrom utillities import get_article_from_title, clean_priceclass FStore(BaseStore):    def __init__(self, shop_url):        super().__init__(shop_url)    def generate_info(self, url):        options = webdriver.ChromeOptions()        options.add_argument('--headless')        options.add_argument('--no-sandbox')        options.add_argument('--disable-dev-shm-usage')        options.add_argument('--disable-gpu')        options.add_argument('--remote-debugging-port=9222')        options.add_argument('--disable-extensions')        options.add_argument('--disable-application-cache')        options.add_argument('--disable-infobars')        driver = webdriver.Chrome(options=options)        try:            driver.get(url)            elements = (driver.                        find_element(By.CSS_SELECTOR,                                     '#content_container > div > div.catalog > div.catalog_container > '                                     'div.catalog_part > div > div').                        find_elements(By.CLASS_NAME, 'catalog_item'))            for item in elements:                try:                    name = item.find_element(By.CLASS_NAME, 'title').text                    price_text = item.find_element(By.CLASS_NAME, 'price').text                    article = get_article_from_title(name.strip())                    prices = [price.strip('‚Ç¥') for price in price_text.replace(' ', '').split() if price.strip()]                    if len(prices) == 2:                        correct_price = prices[1]                    elif len(prices) == 1:                        correct_price = prices[0]                    else:                        correct_price = None                    if article == 'PTH460KOB':                        article = 'PTH460K0B'                    card_item = {                        'name': name,                        'price': correct_price,                        'article': article,                    }                    self.item_list.append(card_item)                except Exception as e:                    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')        except Exception as e:            print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}')        finally:            driver.quit()        return self.item_list    def compare_data_xp_pen(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price'])            article = F_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('üõë'), x))        return sorted_items