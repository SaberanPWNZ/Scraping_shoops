from Classes.store import BaseStore, Soupfrom stores.KTC.ktc_info import KTC_ARTICLESfrom databases.parse_db import get_info_from_dbfrom utillities import get_article_from_title, clean_priceclass KtcStore(BaseStore):    def __init__(self, url):        super().__init__(shop_url='https://ktc.ua/search/brand-wacom/graphic_tablets/?q=wacom&sort-search-desc')        self.xp_pen_url = url        self.soup = Soup(KtcStore.                         get(self,                             shop_url=url))        self.all_items = (self.soup.find_element(class_='catalog__goods').                          find(class_='js-looplist looplist looplist-4 clearfix'))    def generate_info(self):        for item in self.all_items.find_all('div', class_='loop'):            price_element = item.find_next(class_='loop__buy loop__buy-loop')            name = item.find(class_='loop__title').text            article = get_article_from_title(name)            status = item.find_next(class_='loop__pb').text            price = None            if price_element is not None:                price = price_element['data-price'].strip().replace('.00', '')            if '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' not in status:                card_item = {                    'name': name,                    'price': clean_price(price) if price is not None else price,                    'article': article                }                self.item_list.append(card_item)        return self.item_list    def generate_info_xp_pen(self):        for item in self.all_items.find_all('div', class_='loop'):            price_element = item.find_next(class_='loop__buy loop__buy-loop')            name = item.find(class_='loop__title').text            article = get_article_from_title(name)            status = item.find_next(class_='loop__pb').text            price = None            if price_element is not None:                price = price_element['data-price'].strip().replace('.00', '')            if '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' not in status:                card_item = {                    'name': name,                    'price': price,                    'article': article                }                self.item_list.append(card_item)        return self.item_list    def compare_data_xp_pen(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = KTC_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items