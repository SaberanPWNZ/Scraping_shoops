import requestsfrom Classes.store import BaseStorefrom databases.db_helper import get_info_from_db, get_sessionfrom stores.Itbox.itbox_info import ITBOX_HEADERSfrom utillities import get_article_from_title, clean_pricefrom bs4 import BeautifulSoupclass PortativStore(BaseStore):    def __init__(self, url):        super().__init__(            shop_url='https://portativ.ua/ua/catalogsearch/result/?q=wacom')        self.item_list = []        self.response = requests.get(url=url, headers=ITBOX_HEADERS)        self.soup = BeautifulSoup(self.response.text, 'lxml')        self.all_items = self.soup.find(class_='product-catalog catalog-mode-grid')    def generate_info(self):        try:            for item in self.all_items.find_all(class_='cataloglist-item-container catalog-product-card-grid'):                price = item.find_next(class_="price")                name = item.find_next(class_='cataloggrid-item-name-block')                status = item.find_next(class_='availability in-stock')                if status:                    if price is not None:                        price = price.text.strip().split('â‚´')[0].strip().replace(' ', '')                    if name is not None:                        name = name.text.strip()                    card_item = {                        'name': name,                        'price': clean_price(price),                        'article': get_article_from_title(name)                    }                    self.item_list.append(card_item)        except Exception as ex:            return f'{ex}'        return self.item_list