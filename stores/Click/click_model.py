import requestsfrom bs4 import BeautifulSoupfrom Classes.store import BaseStorefrom databases.db_helper import get_session, get_info_from_dbfrom items.models import Itemfrom stores.Click.click_info import CLICK_ARTICLESfrom utillities import get_article_from_titleclass ClickStore(BaseStore):    def __init__(self, url):        super().__init__(            shop_url='https://click.ua/shop/search?q=wacom')        self.item_list = []        self.bs = requests.get(url=url)        self.soup = BeautifulSoup(self.bs.text, 'lxml')        self.all_items = self.soup.find(class_='catalog__row')    def generate_info(self):        try:            for item in self.all_items.find_all(class_='product'):                price = item.find_next(class_="product__price").find('b', class_='b')                name = item.find_next(class_='product__title')                if price is not None:                    price = price.text.strip().split('‚Ç¥')[0].strip().replace(' ', '')                if name is not None:                    name = name.text.strip()                card_item = {                    'name': name,                    'price': price,                    'article': get_article_from_title(name)                }                self.item_list.append(card_item)        except Exception as ex:            return f'{ex}'        return self.item_list    @classmethod    def compare_data_xp_pen(cls, partner_list):        missing_items = []        for elem in partner_list:            if isinstance(elem, str):                missing_items.append(f'‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è: {elem}')                continue            name = elem.get('name', '')            price_partner = int(elem.get('price', 1)) if elem.get('price') is not None else 1            article = CLICK_ARTICLES.get(name)            if article is None:                missing_items.append(f'‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ç–æ–≤–∞—Ä—É: {name}')                continue            item = Item.objects.filter(article=article).first()            if item:                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –±–∞–π—Ç–æ–≤                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω                if price_partner == item_price:                    missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë {article} - –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è {article} - –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')            else:                missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≥–¥–µ —Å–Ω–∞—á–∞–ª–∞ –∏–¥—É—Ç —Ç–µ, —á—Ç–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ —Ü–µ–Ω–µ (—Å —Å–∏–º–≤–æ–ª–æ–º ‚úÖ)        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items