import requestsfrom bs4 import BeautifulSoupfrom django.db.models import Qfrom Classes.store import BaseStorefrom databases.db_helper import get_info_from_db, get_sessionfrom items.models import Itemfrom stores.Foxtrot.foxtrot_info import FOXTROT_ARTICLESfrom utillities import get_article_from_titleclass FoxtrotStore(BaseStore):    def __init__(self, url):        super().__init__(            shop_url='https://www.foxtrot.com.ua/uk/shop/graficheskie_plansheti_wacom.html'        )        self.response = requests.get(url=url, timeout=10)        self.bs = BeautifulSoup(self.response.text, 'lxml')        self.all_items = self.bs.find(class_='listing').find(class_='listing__body-wrap image-switch')        self.item_list = []    def generate_info(self):        try:            if self.all_items:                for item in self.all_items.find_all('article'):                    price = item.find_next('div', class_="card-price")                    name = item.find_next(class_='card__title')                    if price is None or name is None:                        continue                    price = price.text.strip().replace(" ", "").replace("‚Ç¥", "")                    name = name.get('title')                    card_item = {                        'name': name,                        'price': price,                        'article': get_article_from_title(name)                    }                    self.item_list.append(card_item)            else:                print('self.all_items error.')        except Exception as e:            print(f'page error: {e}')        return self.item_list    def compare_data_xp_pen(self, partner_list,  price_field='price_rrp'):        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = FOXTROT_ARTICLES.get(name)            if article:                item = Item.objects.filter(Q(article=article)).first()                if item:                    item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                    if price_partner == item_price:                        missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                    if price_partner < item_price:                        missing_items.append(                            f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                    if price_partner > item_price:                        missing_items.append(                            f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                else:                    missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')            else:                missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items