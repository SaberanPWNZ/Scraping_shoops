import requestsfrom Classes.status import Statusfrom Classes.store import BaseStorefrom items.models import Itemfrom stores.Comtrading.comtrading_info import COMTRADING_ARTICLES_WACOM, COMTRADING_ARTICLES_XP_PENclass ComtradingStore(BaseStore):    def __init__(self, api_url, payload):        super().__init__(shop_url='')        self.url = api_url        self.payload = payload        self.item_list = []    def generate_info(self, articles_dict):        try:            response = requests.post(url=self.url, json=self.payload)            response.raise_for_status()            data = response.json()            item_dict = {}            for item in data['products']:                name = item['name'].strip()                price = int(item['price_local'])                status = item['stock_status']                if status == 'available':                    status = Status.in_stock                else:                    status = Status.not_in_stock                card_item = {                    'name': name,                    'price': price,                    'article': articles_dict.get(name),                    'status': status                }                if name in item_dict:                    if status == Status.in_stock:                        item_dict[name] = card_item                else:                    item_dict[name] = card_item            self.item_list = list(item_dict.values())        except requests.exceptions.RequestException as e:            print(f"An error occurred: {e}")        return self.item_list    def compare_data_xp_pen(self, partner_list):        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else 1            article = COMTRADING_ARTICLES_XP_PEN.get(name)            if article:                try:                    item = Item.objects.get(article=article)                    item_price = int(item.price)                    if price_partner == item_price:                        missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                    if price_partner < item_price:                        missing_items.append(                            f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                    if price_partner > item_price:                        missing_items.append(                            f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                except Item.DoesNotExist:                    missing_items.append(f'üîç{article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö')            else:                continue        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items