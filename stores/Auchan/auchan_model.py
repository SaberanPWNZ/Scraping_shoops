import jsonimport requestsfrom stores.Auchan.auchan_info import AUCHAN_ARTICLESfrom Classes.store import BaseStore, Soupfrom databases.parse_db import get_info_from_dbclass AuchanStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://auchan.ua/ua/catalogsearch/result/?q=wacom',            headers={                "authority": "auchan.ua",                "accept": "*/*",                "accept-encoding": "gzip, deflate, br, zstd",                "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",                "content-type": "application/json",                "cookie": "_gcl_aw=GCL.1717651104.CjwKCAjwmYCzBhA6EiwAxFwfgBybo7zVQZjFM3wHWt9rGv-bzhDBvYxU60OEFUJsl1FbyO8YqrfuphoC_8kQAvD_BwE; _gcl_gs=2.1.k1$i1717651103; _gcl_au=1.1.953543492.1717651104; _ttgclid=CjwKCAjwmYCzBhA6EiwAxFwfgBybo7zVQZjFM3wHWt9rGv-bzhDBvYxU60OEFUJsl1FbyO8YqrfuphoC_8kQAvD_BwE; _ttgclid=CjwKCAjwmYCzBhA6EiwAxFwfgBybo7zVQZjFM3wHWt9rGv"            }        )        self.soup = Soup(AuchanStore.get(            self, shop_url='https://auchan.ua/ua/catalogsearch/result/?q=wacom'))        self.response = requests.get(            'https://auchan.ua/graphql/?query=query%20(%24searchQuery%3A%20String!%2C%20%24currentPage%3A%20Int!%2C%20%24pageSize%3A%20Int!%2C%20%24priceSet%3A%20Boolean!%2C%20%24category%3A%20%5BInt%5D%2C%20%24max_price%3A%20Float%2C%20%24min_price%3A%20Float%2C%20%24sort%3A%20sortAttribute%2C%20%24filter%3A%20%5BfilterAttribute%5D)%20%7B%0A%20search%3A%20GetSearchResultsRev(search_query%3A%20%24searchQuery%2C%20current_page%3A%20%24currentPage%2C%20page_size%3A%20%24pageSize%2C%20min_price%3A%20%24min_price%2C%20max_price%3A%20%24max_price%2C%20sort%3A%20%24sort%2C%20filterCategories%3A%20%24category%2C%20filterAttributes%3A%20%24filter)%20%7B%0A%20page_info%20%7B%0A%20total_pages%0A%20current_page%0A%20page_size%0A%20__typename%0A%20%7D%0A%20total_count%0A%20total_count_filtered%0A%20min_price%20%40include(if%3A%20%24priceSet)%0A%20max_price%20%40include(if%3A%20%24priceSet)%0A%20categories%20%7B%0A%20id%0A%20category_id%3A%20id%0A%20category_name%3A%20name%0A%20position%0A%20count_filtered%0A%20count%0A%20__typename%0A%20%7D%0A%20filters%20%7B%0A%20name%0A%20request_var%0A%20filter_items_count%0A%20filter_items%20%7B%0A%20label%0A%20value_string%0A%20count_filtered%0A%20count%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20products%20%7B%0A%20...ProductBase%0A%20tier_price%20%7B%0A%20value%0A%20qty%0A%20customer_group_id%0A%20__typename%0A%20%7D%0A%20price_per_gram%20%7B%0A%20price%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20is_qty_decimal%0A%20__typename%0A%20%7D%0A%20price_range%20%7B%0A%20minimum_price%20%7B%0A%20regular_price%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20product_labels%20%7B%0A%20alt%0A%20title%0A%20image%0A%20label_type%0A%20visible%20%7B%0A%20category%20%7B%0A%20position%0A%20display%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20immediate_rebate%20%7B%0A%20price%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20extra_bonus%20%7B%0A%20cashback_type%0A%20cashback_value%0A%20__typename%0A%20%7D%0A%20...%20on%20ConfigurableProduct%20%7B%0A%20configurable_options%20%7B%0A%20attribute_code%0A%20product_id%0A%20label%0A%20values%20%7B%0A%20default_label%0A%20label%0A%20store_label%0A%20use_default_value%0A%20value_index%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20variants%20%7B%0A%20product%20%7B%0A%20id%0A%20stock_status%0A%20special_price%0A%20price%20%7B%0A%20regularPrice%20%7B%0A%20amount%20%7B%0A%20value%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%7D%0A%0Afragment%20ProductBase%20on%20ProductInterface%20%7B%0A%20id%0A%20sku%0A%20min_sale_qty%0A%20name%0A%20url_key%0A%20type_id%0A%20stock_status%0A%20preorder%0A%20nv_weight%0A%20thumbnail%20%7B%0A%20url%0A%20__typename%0A%20%7D%0A%20special_price%0A%20price%20%7B%0A%20regularPrice%20%7B%0A%20amount%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20price_per_gram%20%7B%0A%20price%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20is_qty_decimal%0A%20__typename%0A%20%7D%0A%20immediate_rebate%20%7B%0A%20price%20%7B%0A%20currency%0A%20value%0A%20__typename%0A%20%7D%0A%20__typename%0A%20%7D%0A%20attributes%20%7B%0A%20code%0A%20label%0A%20value%0A%20__typename%0A%20%7D%0A%20review_count%0A%20rating_summary%0A%20offers%20%7B%0A%20from_date%0A%20to_date%0A%20__typename%0A%20%7D%0A%20extra_bonus%20%7B%0A%20cashback_type%0A%20cashback_value%0A%20__typename%0A%20%7D%0A%20__typename%0A%7D%0A&variables=%7B%22searchQuery%22%3A%22wacom%22%2C%22currentPage%22%3A1%2C%22pageSize%22%3A24%2C%22priceSet%22%3Afalse%2C%22sort%22%3A%7B%22discount_amount%22%3A%22DESC%22%7D%7D')        self.all_items = self.soup.find_element(class_='Search_results_grid_row__3h-z_ ')    def generate_info(self):        try:            data = json.loads(self.response.text)            for product in data['data']['search']['products']:                name = product['name'].strip()                price = product['price']['regularPrice']['amount']['value']                if product['special_price'] is None:                    price = price                else:                    price = product['special_price']                card_item = {                    'name': name,                    'price': price,                }                self.item_list.append(card_item)        except Exception as e:            return e        return self.item_list    def compare_data_auchan(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price'])            article = AUCHAN_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('üõë'), x))        return sorted_items