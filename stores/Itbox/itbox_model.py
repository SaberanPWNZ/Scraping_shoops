import requestsfrom bs4 import BeautifulSoupfrom django.db.models import Qfrom Classes.store import BaseStorefrom databases.db_helper import get_info_from_db, get_sessionfrom items.models import Itemfrom stores.Itbox.itbox_info import ITBOX_HEADERSfrom utillities import get_article_from_titleclass ItboxStore(BaseStore):    def __init__(self, urls):        super().__init__(            shop_url='https://www.itbox.ua/ua/search/?Search=wacom')        self.all_items = []        self.urls = urls        self.item_list = []        for url in self.urls:            soup = self.get_soup(url)            catalog_content = soup.find('div', class_='products')            if catalog_content:                self.all_items.append(catalog_content)            else:                print(f'No filtered-items found on page: {url}')    def get_soup(self, url):        response = requests.get(url=url, headers=ITBOX_HEADERS)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info(self):        for items in self.all_items:            if items:                for item in items.find_all(class_='stuff left'):                    price = item.find_next(class_="stuff-price__digits")                    name = item.find_next('div', class_='stuff-desc').find('a', class_='to_product')                    article = get_article_from_title(name)                    if price is not None:                        price = price.text.strip().split('‚Ç¥')[0].strip().replace(' ', '')                    if name is not None:                        name = name.text.strip().replace('(2021)', '')                    card_item = {                        'name': name,                        'price': price,                        'article': get_article_from_title(name)                    }                    self.item_list.append(card_item)        return self.item_list    def compare_all_data(cls, partner_list, articles_list, price_field='price'):        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else 1            article = articles_list.get(name)            item = Item.objects.filter(article=article).first()            if item:                item_price = int(getattr(item, price_field))                if price_partner == item_price:                    missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë {article} - –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è {article} - –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )            else:                missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items