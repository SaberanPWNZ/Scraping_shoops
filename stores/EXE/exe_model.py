from django.db.models import Qfrom Classes.store import BaseStorefrom Classes.status import Statusfrom utillities import clean_pricefrom playwright.sync_api import sync_playwrightclass ExeStore(BaseStore):    def __init__(self, urls):        super().__init__(shop_url='url')        self.urls = urls    def scrape_items(self):        final_items_list = []        with sync_playwright() as p:            browser = p.chromium.launch(headless=True)            context = browser.new_context()            page = context.new_page()            try:                for url in self.urls:                    page.goto(url)                    try:                        page.wait_for_selector('.product-list.products_view_grid.per_row_4.larger_images.clearfix',                                               timeout=30000)                    except Exception:                        continue                    items = page.query_selector_all(                        '.product-list.products_view_grid.per_row_4.larger_images.clearfix .product')                    if not items:                        continue                    for item in items:                        try:                            name_elem = item.query_selector('h5')                            name = name_elem.inner_text().strip().title() if name_elem else None                            status_elem = item.query_selector('.stock yes')                            price_elem = item.query_selector('.price.nowrap')                            price = price_elem.inner_text().strip() if price_elem else None                            article_elem = item.query_selector('h5:nth-of-type(2)')                            article = None                            if article_elem:                                article_text = article_elem.inner_text().strip()                                article = article_text.split('–ê—Ä—Ç:')[-1].split('–ö–æ–¥:')[0].strip()                                if article == 'PTH460KOB':                                    article = article.replace('O', '0')                            if name and price:                                card_item = {                                    'name': name,                                    'price': clean_price(price),                                    'article': article,                                    'status': Status.in_stock if status_elem else Status.not_in_stock                                }                                final_items_list.append(card_item)                        except Exception as e:                            print(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')            except Exception as e:                print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}')            finally:                browser.close()        return final_items_list    def compare_data_xp_pen(self, partner_list, article_dict, model, price_field='price'):        missing_items = []        for elem in partner_list:            name = elem.get('name')            price_partner = int(elem.get('price', 1)) if elem.get('price') is not None else 1            article = article_dict.get(name)            item = model.objects.filter(Q(article=article)).first()            if item:                item_price = int(getattr(item, price_field))                if price_partner == item_price:                    missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë {article} - –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è {article} - –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )            else:                missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items