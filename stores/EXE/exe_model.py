import requestsfrom bs4 import BeautifulSoupfrom Classes.store import BaseStorefrom stores.EXE.exe_info import headers, EXE_ARTICLESfrom databases.parse_db import get_info_from_dbfrom utillities import clean_priceclass ExeStore(BaseStore):    def __init__(self, urls):        super().__init__(            shop_url='url')        self.urls = urls        self.all_items = []        for url in self.urls:            soup = self.get_soup(url)            items = soup.find(class_='product-list products_view_grid per_row_4 larger_images clearfix')            self.all_items.append(items)    def get_soup(self, url):        response = requests.get(url, headers=headers)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info_wacom(self):        item_list = []        try:            for items in self.all_items:                for item in items.find_all(class_='product'):                    name_elem = item.find('h5')                    price_elem = item.find(class_='price nowrap')                    article_elem = name_elem.find_next('h5')                    if price_elem is None or name_elem is None or article_elem is None:                        continue                    name = name_elem.text.strip().title()                    price = price_elem.text.strip()                    article_text = article_elem.text.strip()                    article = article_text.split('–ê—Ä—Ç:')[-1].split('–ö–æ–¥:')[0].strip()                    if article == 'PTH460KOB':                        article = article.replace('O', '0')                    card_item = {                        'name': name,                        'price': clean_price(price),                        'article': article                    }                    item_list.append(card_item)                else:                    continue        except Exception as e:            print(f'Error loading: {e}')        return item_list    def compare_data_xp_pen(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = EXE_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items