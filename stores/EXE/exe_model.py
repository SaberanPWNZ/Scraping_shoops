import loggingimport requestsfrom bs4 import BeautifulSoupfrom django.db.models import Qfrom Classes.store import BaseStorefrom stores.EXE.exe_info import headersfrom utillities import clean_priceclass ExeStore(BaseStore):    def __init__(self, urls):        super().__init__(            shop_url='url')        self.urls = urls        self.all_items = []        for url in self.urls:            soup = self.get_soup(url)            items = soup.find(class_='product-list products_view_grid per_row_4 larger_images clearfix')            self.all_items.append(items)    def get_soup(self, url):        response = requests.get(url, headers=headers)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info_wacom(self):        item_list = []        try:            for items in self.all_items:                for item in items.find_all(class_='product'):                    name_elem = item.find('h5')                    price_elem = item.find(class_='price nowrap')                    article_elem = name_elem.find_next('h5')                    if price_elem is None or name_elem is None or article_elem is None:                        continue                    name = name_elem.text.strip().title()                    price = price_elem.text.strip()                    article_text = article_elem.text.strip()                    article = article_text.split('–ê—Ä—Ç:')[-1].split('–ö–æ–¥:')[0].strip()                    if article == 'PTH460KOB':                        article = article.replace('O', '0')                    card_item = {                        'name': name,                        'price': clean_price(price),                        'article': article                    }                    item_list.append(card_item)                else:                    continue        except Exception as e:            print(f'Error loading: {e}')        return item_list    def compare_data_xp_pen(self, partner_list, article_dict, model, price_field='price'):        missing_items = []        for elem in partner_list:            name = elem.get('name')            price_partner = int(elem.get('price', 1)) if elem.get('price') is not None else 1            article = article_dict.get(name)            item = model.objects.filter(Q(article=article)).first()            if item:                item_price = int(getattr(item, price_field))                if price_partner == item_price:                    missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë {article} - –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è {article} - –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω'                    )            else:                missing_items.append(f'üîç {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items