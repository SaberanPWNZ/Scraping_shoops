from playwright.sync_api import sync_playwrightfrom Classes.status import Statusfrom Classes.store import BaseStorefrom utillities import clean_priceclass MtaStore(BaseStore):    def __init__(self):        super().__init__(shop_url='https://mta.ua/search/manufacturers_wacom/page=2?search=wacom')        self.item_list = []    def scrape_items(self, manufactures_part_of_url, url_query_part, url_pages_count, articles_dict):        final_items_list = []        base_url = f'https://mta.ua/search/manufacturers_{manufactures_part_of_url}/page='        with sync_playwright() as p:            browser = p.chromium.launch(headless=True)            context = browser.new_context()            page = context.new_page()            try:                for i in range(1, url_pages_count + 1):                    url = f'{base_url}{i}?search={url_query_part}'                    page.goto(url)                    try:                        page.wait_for_selector('div.products__item', timeout=30000)                    except Exception:                        continue                    items = page.query_selector_all('div.products__item')                    if not items:                        continue                    for item in items:                        try:                            name_elem = item.query_selector('.products__item_caption .products__item_name')                            name = name_elem.inner_text().strip() if name_elem else None                            price_elem = item.query_selector('.products__item_price')                            price = price_elem.inner_text().strip('â‚´').replace(' ', '').strip() if price_elem else None                            status_elem = item.query_selector('.products__item_btn_text')                            status = Status.in_stock if status_elem else Status.not_in_stock                            card_item = {                                'name': name,                                'price': clean_price(price),                                'article': articles_dict.get(name),                                'status': status                            }                            final_items_list.append(card_item)                        except Exception as e:                            print(e)            except Exception as e:                print(e)            finally:                browser.close()        return final_items_list