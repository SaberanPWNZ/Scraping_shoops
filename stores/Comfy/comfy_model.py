import undetected_chromedriver as ucfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom Classes.store import BaseStorefrom databases.db_helper import get_session, get_info_from_dbfrom utillities import get_article_from_title, clean_priceclass ComfyStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://comfy.ua/ua/search/?q=wacom'        )        self.item_list = []    def generate_info(self, url):        options = uc.ChromeOptions()        # options.add_argument("--headless")        # options.add_argument("disable-infobars")        # options.add_argument("--disable-extensions")        #options.add_argument('--headless')        options.add_argument('--no-sandbox')        options.add_argument('--disable-dev-shm-usage')        options.add_argument('--disable-gpu')        options.add_argument('--remote-debugging-port=9222')        options.add_argument('--disable-extensions')        options.add_argument('--disable-application-cache')        options.add_argument('--disable-infobars')        options.add_argument("--disable-blink-features=AutomationControlled")        options.add_argument(            "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "            "Chrome/58.0.3029.110 Safari/537.3")        driver = uc.Chrome(options=options)        try:            driver.get(url)            wait = WebDriverWait(driver, 10)            wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'products-list-item')))            all_items = driver.find_elements(By.CLASS_NAME, 'products-list-item')            for item in all_items:                try:                    title_elem = item.find_element(By.CLASS_NAME, 'products-list-item__info').find_element(By.TAG_NAME,                                                                                                           'a').get_attribute(                        'title')                    price_elem = item.find_element(By.CLASS_NAME,                                                   'products-list-item-price__actions-price-current').text                    article = get_article_from_title(title_elem)                    if title_elem and price_elem:                        title = title_elem.strip()                        price = price_elem.strip()                        if "–ú—ñ–∫—Ä–æ–ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è" in title:                            continue                        card_item = {                            'name': title,                            'price': clean_price(price),                            'article': article,                        }                        self.item_list.append(card_item)                except Exception as e:                    print(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}')        except Exception as e:            print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}')        finally:            driver.quit()        return self.item_list    def compare_data_xp_pen(cls, partner_list, articles_list):        items_from_db = list(get_info_from_db(session=get_session()))        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = articles_list.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items