from Classes.status import Statusfrom Classes.store import BaseStorefrom utillities import get_article_from_titleimport requestsfrom bs4 import BeautifulSoupclass CanStore(BaseStore):    def __init__(self, urls):        super().__init__(shop_url='')        self.all_items = []        self.urls = urls        for url in self.urls:            soup = self.get_soup(url)            catalog_content = soup.find(class_='group-product-wrap catalog-tile')            if catalog_content:                self.all_items.append(catalog_content)            else:                print(f'No filtered-items found on page: {url}')    def get_soup(self, url):        response = requests.get(url)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info_with_using_articles_dict(self, get_article_from_dict):        item_list = []        for items in self.all_items:            if items:                for item in items.find_all(class_='catalog__item'):                    price = item.find_next(class_="item__price")                    name = item.find_next('a', class_='info__name')                    status = item.find_next(class_='status status-in_stock')                    if price is not None:                        price = price.text.strip().split('₴')[0].strip().replace(' ', '').strip('грн')                    if name is not None:                        name = name.text.strip()                    if status:                        status = Status.in_stock                    else:                        status = Status.not_in_stock                        price = None                    card_item = {                        'name': name,                        'price': price,                        'article': get_article_from_dict.get(name),                        'status': status                    }                    item_list.append(card_item)        return item_list