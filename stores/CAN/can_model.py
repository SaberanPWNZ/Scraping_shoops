from Classes.status import Statusfrom Classes.store import BaseStorefrom utillities import get_article_from_titleimport requestsfrom bs4 import BeautifulSoupclass CanStore(BaseStore):    def __init__(self, urls):        super().__init__(shop_url='')        self.all_items = []        self.urls = urls        for url in self.urls:            soup = self.get_soup(url)            catalog_content = soup.find(class_='group-product-wrap catalog-tile')            if catalog_content:                self.all_items.append(catalog_content)            else:                print(f'No filtered-items found on page: {url}')    def get_soup(self, url):        response = requests.get(url)        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info_with_using_articles_dict(self, get_article_from_dict):        item_list = []        for items in self.all_items:            if items:                for item in items.find_all(class_='catalog__item'):                    price = item.find_next(class_="item__price")                    name = item.find_next('a', class_='info__name')                    status = item.find_next(class_='status status-in_stock')                    if price is not None:                        price = price.text.strip().split('‚Ç¥')[0].strip().replace(' ', '').strip('–≥—Ä–Ω')                    if name is not None:                        name = name.text.strip()                    if status:                        status = Status.in_stock                    else:                        status = Status.not_in_stock                    card_item = {                        'name': name,                        'price': price,                        'article': get_article_from_dict.get(name),                        'status': status                    }                    item_list.append(card_item)        return item_list    # def compare_data_can(self, partner_list):    #     #need rework    #    #     missing_items = []    #    #     for elem in partner_list:    #         article = elem['article']    #         price_partner = elem['price']    #    #         if price_partner is None:    #             continue    #    #         try:    #             price_partner = int(price_partner)    #         except ValueError:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {article}')    #             continue    #    #         try:    #             if article in items_dict:    #                 item = items_dict[article]    #                 item_price = item.price    #    #                 if item_price is None:    #                     continue    #    #                 try:    #                     item_price = int(item_price.decode('utf-8')) if isinstance(item_price, bytes) else int(    #                         item_price)    #                 except ValueError:    #                     missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏ –†–†–¶ –¥–ª—è {article}')    #                     continue    #    #                 if price_partner == item_price:    #                     missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')    #                 elif price_partner < item_price:    #                     missing_items.append(    #                         f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')    #                 else:    #                     missing_items.append(    #                         f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')    #             else:    #                 missing_items.append(f'üîç {article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')    #         except KeyError:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω–∏—Ö {article}')    #         except Exception as e:    #             missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: {e}')    #    #     return missing_items    # @classmethod    # def compare_all_data(cls, partner_list, articles_list):    #     items_from_db = list(get_info_from_db(session=get_session()))    #     items_dict = {item.article: item for item in items_from_db}    #    #     missing_items = []    #    #     for elem in partner_list:    #         name = elem['name']    #         price_partner = int(elem['price']) if elem['price'] is not None else 1    #         article = articles_list.get(name)    #    #         if article in items_dict.keys():    #             item = items_dict[article]    #             item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)    #             if price_partner == item_price:    #                 missing_items.append(f'‚úÖ {article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {price_partner} –≥—Ä–Ω, –†–†–¶: {item_price} –≥—Ä–Ω')    #    #             elif price_partner < item_price:    #                 missing_items.append(    #                     f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶: {item_price} –≥—Ä–Ω')    #    #             else:    #                 missing_items.append(    #                     f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶: {item_price} –≥—Ä–Ω')    #    #         else:    #             missing_items.append(f'üîç{article} –Ω–µ–∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')    #     sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))    #     return sorted_items