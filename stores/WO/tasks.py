import loggingimport osimport djangoos.environ.setdefault("DJANGO_SETTINGS_MODULE", "scraper.settings")django.setup()from scraper.celery_config import appfrom stores.WO.Wo_model import WoStorefrom stores.WO.wo_info import wacom_page_urls, WO_WACOM_ARTICLES, xp_pen_page_urls, WO_XP_PEN_ARTICLESlogger = logging.getLogger('scraping')@app.task()def start_wo_wacom():    try:        wo = WoStore(wacom_page_urls)        items = wo.generate_info(articles_dict=WO_WACOM_ARTICLES)        if not items:            logger.info(f"Не вдалось спарсити данні WO/WACOM - {len(items)} товарів")            wo.send_allert_notification()        logger.info(f"Збережено/Оновлено {len(items)} товарів для партнера WO (бренд WACOM).")        wo.save_parsed_data(partner_name="WO", items=items, brand="WACOM")    except Exception as e:        logger.info(f"Помилка парсингу данних WO/WACOM {e}")@app.task()def start_wo_xp_pen():    try:        wo = WoStore(xp_pen_page_urls)        items = wo.generate_info(articles_dict=WO_XP_PEN_ARTICLES)        if not items:            wo.send_allert_notification()            logger.info(f"Не вдалось спарсити данні WO/XP-Pen - {len(items)} товарів")        wo.save_parsed_data(partner_name="WO", items=items, brand="XP-Pen")        logger.info(f"Збережено/Оновлено {len(items)} товарів для партнера WO (бренд XP-Pen).")    except Exception as e:        logger.info(f"Помилка парсингу данних WO/WACOM {e}")