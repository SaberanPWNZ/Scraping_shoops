from Classes.store import BaseStore, Soupfrom Click.click_info import CLICK_ARTICLESfrom databases.parse_db import get_info_from_dbfrom utillities import get_article_from_titleclass ClickStore(BaseStore):    def __init__(self, url):        super().__init__(            shop_url='https://click.ua/shop/search?q=wacom')        self.soup = Soup(ClickStore.get(            self, shop_url=url))        self.all_items = self.soup.find_element(class_='catalog__row')    def generate_info(self):        try:            for item in self.all_items.find_all(class_='product'):                price = item.find_next(class_="product__price").find('b', class_='b')                name = item.find_next(class_='product__title')                if price is not None:                    price = price.text.strip().split('‚Ç¥')[0].strip().replace(' ', '')                if name is not None:                    name = name.text.strip()                card_item = {                    'name': name,                    'price': price,                    'article': get_article_from_title(name)                }                self.item_list.append(card_item)        except Exception as ex:            return f'{ex}'        return self.item_list    @classmethod    def compare_data_xp_pen(cls, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem['name']            price_partner = int(elem['price']) if elem['price'] is not None else price_partner == 1            article = CLICK_ARTICLES.get(name)            if article in items_dict.keys():                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                if price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                if price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                print(f'{name} not found in the database')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('‚úÖ'), x))        return sorted_items