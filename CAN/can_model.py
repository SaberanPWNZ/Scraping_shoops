from Classes.store import BaseStorefrom databases.parse_db import get_info_from_dbfrom utillities import get_article_from_titleimport requestsfrom bs4 import BeautifulSoupclass CanStore(BaseStore):    def __init__(self, shop_url='https://can.ua/graphic-tablets/wacom/c1513/v7853/'):        super().__init__(shop_url)        self.soup = self.get_soup()        self.all_items = self.soup.find(class_='catalog-tile')    def get_soup(self):        response = requests.get('https://can.ua/graphic-tablets/wacom/c1513/v7853/')        response.raise_for_status()        return BeautifulSoup(response.text, 'lxml')    def generate_info(self):        for item in self.all_items.find_all(class_='catalog__item'):            price = item.find_next(class_="item__price")            name = item.find_next('a', class_='info__name')            article = get_article_from_title(name)            if price is not None:                price = price.text.strip().split('‚Ç¥')[0].strip().replace(' ', '').strip('–≥—Ä–Ω')            if name is not None:                name = name.text.strip()            card_item = {                'name': name,                'price': price,                'article': get_article_from_title(name)            }            self.item_list.append(card_item)        return self.item_list    def compare_data_can(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            article = elem['article'].upper()            price_partner = elem['price']            if price_partner is None:                continue            try:                price_partner = int(price_partner)            except ValueError:                missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {article}')                continue            try:                if article in items_dict:                    item = items_dict[article]                    item_price = item.price                    if item_price is None:                        continue                    try:                        item_price = int(item_price.decode('utf-8')) if isinstance(item_price, bytes) else int(                            item_price)                    except ValueError:                        missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏ –†–†–¶ –¥–ª—è {article}')                        continue                    if price_partner == item_price:                        missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                    elif price_partner < item_price:                        missing_items.append(                            f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                    else:                        missing_items.append(                            f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                else:                    missing_items.append(f'üîç {article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')            except KeyError:                missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω–∏—Ö {article}')            except Exception as e:                missing_items.append(f'‚ùå –ü–æ–º–∏–ª–∫–∞: {e}')        return missing_items