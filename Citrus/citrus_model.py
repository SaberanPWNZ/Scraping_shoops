import jsonimport reimport requestsfrom bs4 import BeautifulSoupfrom Citrus.citrus_config import CITRUS_ITEMSfrom Classes.store import BaseStorefrom databases.parse_db import get_info_from_dbclass CitrusStore(BaseStore):    def __init__(self):        super().__init__(            shop_url='https://www.ctrs.com.ua/search/?page=2&query=wacom')    def generate_info(self):        item_list = []        for i in range(1, 4):            response = requests.get(f'https://www.ctrs.com.ua/search/?page={i}&query=wacom')            soup = BeautifulSoup(response.text, 'lxml')            all_items = soup.find(class_='catalog-facet')            for elem in all_items:                name_elem = elem.find_next(class_='line-clamp-2 break-word MainProductCard-module__title___3fVuF')                price_elem = elem.find_next(class_='medium MainProductCard-module__price___34KIa')                name = name_elem.text.strip() if name_elem else None                price = price_elem.text.strip('‚Ç¥').replace(' ', '').strip() if price_elem else None                if price:                    price = re.sub(r'\s+', '', price)                else:                    continue                card_item = {                    'name': name,                    'price': price,                }                item_list.append(card_item)        return item_list    def compare_data_citrus(self, partner_list):        items_from_db = list(get_info_from_db())        items_dict = {item.article: item for item in items_from_db}        missing_items = []        for elem in partner_list:            name = elem.get('name')            price_partner = elem.get('price')            if not price_partner:                print(f'Price missing for {name}')                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Ü–µ–Ω—ã            price_partner = int(price_partner)            article = CITRUS_ITEMS.get(name)            if article in items_dict and article !='EOL':                item = items_dict[article]                item_price = int(item.price.decode('utf-8')) if isinstance(item.price, bytes) else int(item.price)                if price_partner == item_price:                    missing_items.append(f'‚úÖ{article} - –¶—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞- {price_partner} –≥—Ä–Ω, –†–†–¶ {item_price} –≥—Ä–Ω')                elif price_partner < item_price:                    missing_items.append(                        f'üõë –¶—ñ–Ω–∞ –Ω–∏–∂—á–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')                elif price_partner > item_price:                    missing_items.append(                        f'‚ö†Ô∏è –¶—ñ–Ω–∞ –≤–∏—â–∞ –∑–∞ –†–†–¶ {article} - {price_partner} –≥—Ä–Ω, –¶—ñ–Ω–∞ –†–†–¶ = {item_price} –≥—Ä–Ω')            else:                missing_items.append(f'üîç{article} –Ω–µ–∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö')        sorted_items = sorted(missing_items, key=lambda x: (not x.startswith('üõë'), x))        return sorted_items