import loggingimport sqlite3from datetime import datetimefrom Classes.item import Itemclass DataBase:    def __init__(self, db_path):        self.db_path = db_path        self.__connection = sqlite3.connect(self.db_path)        self.__cursor = self.__connection.cursor()    def create_connection(self):        try:            self.__connection = sqlite3.connect(self.db_path)            self.__cursor = self.__connection.cursor()            return self.__connection        except sqlite3.Error as e:            logging.error(f"Error connecting to database: {e}")            return None    def create_table(self, table_name):        pass    def close(self):        self.__cursor.close()        self.__connection.close()    def update_db(self, info_from_google_sheet: list):        try:            con = self.create_connection()            if not con:                logging.error("Failed to establish connection.")                return            for elem in info_from_google_sheet:                item = Item(*elem)                self.__cursor.execute("SELECT * FROM WACOM WHERE article = ?", (item.article,))                existing_item = self.__cursor.fetchone()                if existing_item:                    new_price = elem['price']                    self.__cursor.execute("UPDATE WACOM SET price = ? WHERE article = ?", (new_price, item.article))                else:                    self.__cursor.execute("INSERT INTO WACOM (article, title, price) VALUES (?, ?, ?)",                                          (item.article, item.title, item.price))                con.commit()            current_datetime = datetime.now()            formatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')            logging.info(f"База обновлена: {formatted_datetime}")        except Exception as e:            logging.error(f"помика оновлення БД: {e}")            raise        finally:            self.close()    def get_info_from_db(self):        con = self.create_connection()        cur = con.cursor()        cur.execute('''SELECT * FROM WACOM''')        all_from_table = cur.fetchall()        items_from_db = []        for elem in all_from_table:            item = Item.from_tuple(elem)            items_from_db.append(item)            yield item        self.close()        return items_from_db